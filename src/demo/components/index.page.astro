---
import Page from "@/layout/Page.astro";
import Copyable from "@/Copyable.astro";
import { globalProps } from "@/globalProps.js";
import Layout from "@/layout/Layout.astro";
import MyRender from "./Render.astro";
import ThemeSwitcher from "@/layout/header/ThemeSwitcher.astro";
globalProps.page_section = "guides";

enum AspectEnum {
	Control = "Control",
	UserFocusExperience = "UserFocusExperience",
	DevTools = "DevTools",
	RichText = "RichText"
}
const ComponentsList = new Map(
	[
		{
			key: "HorizontalLine",
			aspects: [AspectEnum.UserFocusExperience],
			variants: [
				{
					variant_name: "Native",
					demo_id: "<hr>",
				},
				{
					variant_name: "Margin",
					description: "Интегрированна в дизайн сайта; имеет блочные отступы",
					demo_id: "<hr data_variant_1>",
				},
			],
		},
		{
			key: "UnorderedList",
			aspects: [AspectEnum.UserFocusExperience, AspectEnum.RichText],
			variants: [
				{
					variant_name: "Native",
					demo_id: "<ul>",
				},
				{
					variant_name: "Inline",
					description: "Линейный список более эффективно реализует доступное пространство; не превышайте 60em",
					demo_id: "<ul data_variant_1>",
				},
			],
		},
		{
			key: "Copyable",
			aspects: [AspectEnum.RichText],
			variants: [
				{
					variant_name: "Native",
					description: "Когда содержимое полезно скопировать",
					demo_id: "<Copyable>",
				},
			],
		},
		{
			key: "Tooltiped",
			aspects: [AspectEnum.RichText],
			variants: [
				{
					variant_name: "Native",
					description: "Позволяет отобразить подробности при наведении или клике. Рекомендуется указывать контент за круглыми скобками, а не скрывать его*",
					demo_id: "<Tooltiped>",
				},
			],
		},
		{
			key: "CodeSyntax",
			aspects: [AspectEnum.DevTools],
			variants: [
				{
					variant_name: "Native",
					demo_id: "<Code code= language=>",
				},
			],
		},
		{
			key: "CellInput",
			aspects: [AspectEnum.Control],
			variants: [
				{
					variant_name: "Native",
					description: "Синхронизирует и запоминает своё значение",
					demo_id: `<CellInput key= />`,
				}
			]
		}
	].map((item) => [item.key, item])
);

function aspects_set() {
	return Array.from(
		new Set(
			Array.from(ComponentsList.values())
				.map(($) => $.aspects)
				.flat()
		).values()
	);
}

function components_with_aspect(value: AspectEnum) {
	return Array.from(ComponentsList.values()).filter(($) =>
		$.aspects.includes(value)
	);
}
---

<Page>
	<Layout article_variant="0">
		<!-- Disable -->
		<section slot="Header"></section>
		<!-- Disable -->
		<section slot="Comments"></section>

		<!-- MARK: Left sidebar
		  -->
		<nav slot="NavContent">
			{
				aspects_set().map((aspect, i) => (
					<li>
						<a href={`#${aspect}`} rel="noopener noreferrer">{i + 1}. {aspect}</a>
					</li>
				))
			}
		</nav>

		<!-- MARK: Main
		  -->

		<!-- 
		Structure: 
		main /
			section[data_chapter]
				element-group
					h2
					ul
				ul[data_ul_components] /
					section[data_component]
						h4
						ul[data_ul_demo_id] /
							li[data_demo_id]
								h5
								p
								aside[data_preview]
		-->
		<main>
			<header>
				<h2>Содержимое страницы (список компонентов)</h2>
				<ul data_variant_1>
					{
						Array.from(ComponentsList.values()).map(($) => (
							<li><a href = {`#${$.key}`}>{$.key}</a></li>
					))}
				</ul>
				<element-rows data_variant_1>
					<i>Все демонстрации имеют внутренний отступ 1rem*</i>
					<i>Компоненты могут находиться одновременно в нескольких разделах**</i>
				</element-rows>
				<element-rows data_variant_1>
					<h4>Конфигурация</h4>
					<ThemeSwitcher/>
				</element-rows>	
			</header>
			{
				aspects_set().map((aspect) => (
					<section data_chapter id = {aspect}>
						<element-group>
							<h2>Раздел: {aspect}</h2>
							<ul data_variant_1>
								{components_with_aspect(aspect).map(($) => (
									<li><a href = {`#${$.key}`}>{$.key}</a></li>
								))}
							</ul>
						</element-group>
						<ul data_ul_components>
						{components_with_aspect(aspect).map(($) => (
							<section id={$.key} data_component>
								{(
									<h4>Компонент: {$.key}</h4>
									<ul data_ul_demo_id data_variant_0>{$.variants.map(variant => 
										<li data_demo_id = {variant.demo_id}>
											<h5><Copyable>{variant.demo_id}</Copyable></h5>
											<p>{variant.description}</p>
											<aside data_preview x={variant.demo_id}>
												<MyRender key = {variant.demo_id}/>
											</aside>
										</li>
									)}</ul>
								)}
							</section>
						))}
						</ul>
					</section>
				))
			}
			<hr>
			<footer>
				<element-rows>
					<h4>Исходные коды демонстраций (через VSCode)</h4>
					<a target="_blank" href="https://vscode.dev/github/BooBooBlant/NameLog/blob/main/src/demo/components/Render.astro">vscode.dev/.../demo/components</a>
				</element-rows>
			</footer>
		</main>
	</Layout>
</Page>

<!-- Styles -->
<style>
ul[variant_1] {
	max-width: 60em;
}
main {
	display: flex;
	flex-direction: column;
	gap: calc(var(--base_hierarchy_gap) * pow(var(--divina_proportione), 2));
	line-height: 1.6;
	padding-bottom: 50vh;
	scroll-snap-type: y mandatory;
}

main > section, main > header, main > footer {
	gap: calc(var(--base_hierarchy_gap) * var(--divina_proportione));
	display: flex;
	flex-direction: column;
	position: relative;
}

[data_chapter] {
	&:has([data_preview]:hover) {
		&::before {
			background: var(--accent-color);
		}
	}

	&::before {
		content: "";
		width: 2px;
		background: #8888;
		left: -1rem;
		height: 100%;
		position: absolute;
		display: block;
	}
}

[data_ul_components] {
	display: flex;
	flex-direction: column;
	gap: calc(var(--base_hierarchy_gap) * var(--divina_proportione));
}

[data_ul_demo_id] {
	display: flex;
	gap: var(--base_hierarchy_gap);
	flex-direction: column;
	list-style: none;
	position: relative;
}
[data_demo_id] {
	&:has([data_preview]:hover) {
		&::before {
			background: var(--accent-color);
		}
	}

	&::before {
		content: "";
		width: 2px;
		background: linear-gradient(to bottom, var(--page-text-color), transparent);
		left: -0.5rem;
		height: 100%;
		position: absolute;
		display: block;
	}
	& p {
		max-width: 60em;
	}
	& h5 {
		background: #8888;
		display: inline;
	}
	position: relative;
}
[data_preview] {
	border: 1px solid;
	padding: 1rem;
}


</style>
