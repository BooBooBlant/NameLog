---
import Tooltiped from "./TooltipedOnClick.astro";
import TextAlignSwitcher from ".//control/TextAlignSwitcher.astro";
---

<element-container>
  <Tooltiped
    transition
    _aside={{ style: "right: -100%; top: 100%" }}
    _section={{ style: "height: 100%" }}
  >
    <button class="theme-switcher" slot="container">T</button>
    <section
      slot="content"
      style="background-color: red; width: 300px; aspect-ratio: 4/2; max-width: 80vw;"
    >
      <TextAlignSwitcher />
      <p>
        <input type="checkbox" name="" id="" />
        Светлая тема
      </p>
      <p>
        <p>Цветовой акцент:</p>
        <input
          type="color"
          oninput=`document.documentElement.style.setProperty("--accent-color", this.value)`
        />
      </p>
      <p>
        <p>Размер шрифта:</p>
        <input
          type="range"
          min="1"
          oninput="document.body.style.setProperty('font-size', isNaN(this.value) ? 'inherit' : `${this.value / 100 + 0.5}em`)"
        />
      </p>
    </section>
  </Tooltiped>
</element-container>

<style>
  element-container {
    aspect-ratio: 1/1;
    height: 80%;
    display: flex;
    justify-content: center;
  }

  .theme-switcher {
    height: 100%;
    aspect-ratio: 1/1;
    cursor: pointer;
    align-self: center;
    border-radius: 50%;
    font-weight: bold;
    -webkit-text-stroke: 4px currentColor;
    -text-stroke: 4px currentColor;
  }

  :global(theme-swither_element-filter) {
    --animation-speed: 0.5s;
    backdrop-filter: invert(0) sepia(0) hue-rotate(180deg);
    display: block;
    transition:
      width var(--animation-speed),
      height var(--animation-speed);
    position: fixed;
    top: 0;
    left: 0;
    width: 0;
    height: 0;
    pointer-events: none;
    flex-shrink: 0;
  }

  :global(theme-swither_element-filter:not(.light)) {
    width: 0px;
  }

  :global(theme-swither_element-filter.light) {
    width: 100vmax;
    height: 100vmax;
  }
</style>

<script>
  // Find our component DOM on the page.
  // const buttons = document.querySelectorAll(".theme-switcher");

  // const getNode = () =>
  //   document.querySelector("theme-swither_element-filter") ||
  //   (() => {
  //     const node = document.createElement("theme-swither_element-filter");
  //     document.body.appendChild(node);
  //     return node;
  //   })();

  // if (localStorage.getItem("namelog_theme-swither_value") === "light") {
  //   getNode().classList.add("light");
  // }

  // // Add event listeners to fire confetti when a button is clicked.
  // buttons.forEach((button) => {
  //   button.addEventListener("click", () => {
  //     const node = getNode();

  //     console.log(getNode().className);

  //     setTimeout(() => {
  //       node.classList.toggle("light");
  //       localStorage.setItem(
  //         "namelog_theme-swither_value",
  //         node.classList.contains("light") ? "light" : "dark"
  //       );
  //     });
  //   });
  // });
</script>
